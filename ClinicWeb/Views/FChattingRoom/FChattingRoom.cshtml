@{
    ViewData["Title"] = "聊天室";
}
@model MemberMemberList;

@section Styles{
	<link href="~/msit155e/css/fchattingroom/chatroom.css" rel="stylesheet" asp-append-version="true" />
}

<section style="background-color: white">

    <div class="container py-5" style="background-color: white; max-width:1300px">

        <div class="row">
            <h3>線上諮詢   歡迎~ <span id="SelfID">@User.Identity.Name</span></h3>
                <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0 leftbox" id="2">

                <div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <img src="~/images/chat.jpg" class="d-block w-100" alt="First Slide">
                        </div>
                        <div class="carousel-item">
                            <img src="~/images/chat2.jpg" class="d-block w-100" alt="Second Slide">
                        </div>
                        <div class="carousel-item">
                            <img src="~/images/chat3.jpg" class="d-block w-100" alt="Third Slide">
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0 leftbox" id="1">
                
                <h5 class="font-weight-bold mb-3 text-center text-lg-start">線上清單</h5>
                <hr />
                <div class="card">
                    <div class="card-body">

                        <ul class="list-unstyled mb-0" id="IDList">
                            @* <li class="p-2 border-bottom" style="background-color: white;">
                                <a href="#!" class="d-flex justify-content-between">
                                    <div class="d-flex flex-row">
                                        <img src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/avatar-8.webp" alt="avatar"
                                             class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                        <div class="pt-1">
                                            <p class="fw-bold mb-0" id="name">沉沉沉</p>
                                            <p class="small text-muted" >Hello, Are you there?</p>
                                        </div>
                                    </div>
                                    <div class="pt-1">
                                        <p class="small text-muted mb-1"  id="time">12.30</p> 
                                        <span class="badge bg-danger float-end">1</span>
                                    </div>
                                </a>
                            </li> *@
                            
                        </ul>

                    </div>
                </div>

            </div>
            <div class="col-md-6 col-lg-7 col-xl-8 rightbox" style=" height: 700px;">
                <div style="height: 400px;">
                <ul class="list-unstyled" id="messageList" style="max-height: 400px; overflow-y: auto;padding-top:5px; ">
                </ul>
                </div>
                <div class="bg-white mb-3">
                    <div class="mb-3">
                        @* <label for="sendToID" class="form-label">指定 ID</label> *@
                        <input type="text" class="form-control" id="sendToID">
                    </div>
                    <div class="form-outline" >
                        <label class="form-label" for="textAreaExample2">輸入訊息</label>
                        <textarea class="form-control" id="message" style="height: 200px; font-size: 18px;"></textarea>
                    </div>
                </div>
                <label for="fileInput">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                        <path d="M0 0h24v24H0z" fill="none" />
                        <path d="M21 15v4a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-4H0l8-8 8 8h-3zm-2-7a8.963 8.963 0 0 1-.5 2.998L10 4.414 4.5 10A8.963 8.963 0 0 1 4 8a9 9 0 0 1 18 0c0 1.964-1.79 4.525-3.998 7.998L18 18v1h4a1 1 0 0 1 1 1v2h2v-2a3 3 0 0 0-3-3H2a3 3 0 0 0-3 3v2h2v-2a1 1 0 0 1 1-1h2v-1a7.963 7.963 0 0 1 2-5.002V7h2zm-8 1a6 6 0 0 0-6 6h2a4 4 0 0 1 8 0h2a6 6 0 0 0-6-6zm-1 8h2v-2h-2v2zm0-4h2V9h-2v2z" />
                    </svg>
                    上傳圖片
                </label>
                <input type="file" id="fileInput" style="display: none;" />
                <button type="button">&#x1F604;</button>
                <button type="button" id="openModalBtn">電子簽章</button>
                <button type="button" class="btn btn-info btn-rounded float-end" id="sendButton">送出</button>
            </div>

        </div>

    </div>
    <!-- 懸浮視窗 -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div>
                顏色：<input id="color" type="color">
                粗細：
                <select id="lineWidth">
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                    <option>6</option>
                    <option>7</option>
                </select>
                <button id="clearBtn">清除</button>
            </div>
            <canvas id="modalCanvas" width="600" height="400" style="border:2px solid gray"></canvas>
        </div>
    </div>
</section>

@* <body class="bodyctrl">
    <div class="wrapper">
        <div class="chat-box">
            <div class="chat-head">
                <h2>聊天室</h2>
            </div>
            <div class="chat-body">
                <div class="msg-insert">
                </div>
                <div class="chat-text">
                    <textarea id="text" placeholder="發送"></textarea>
                </div>
            </div>
        </div>
    </div>
</body> *@
<script src="~/lib/emojione/lib/js/emojione.min.js"></script>
<link rel="stylesheet" href="~/lib/emojione/emojione.min.css">
<script src="~/lib/emojione/emojione.min.js"></script>
<link href="~/css/openmodal.css" rel="stylesheet" />
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                @section Scripts{
    @*     <link href="~/css/chatroom.css" rel="stylesheet" /> *@
   @*  <link href="~/css/chatstyle.css" rel="stylesheet" /> *@
    <script>
        //表情



        let list;
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withHubProtocol(new signalR.JsonHubProtocol())
            .build();

            
        //與Server建立連線
        connection.start().then(function () {
            console.log("Hub 連線完成");
        }).catch(function (err) {
            alert('連線錯誤: ' + err.toString());
        });
      
        //登入會員的清單
        connection.on("UpdList", function (jsonList) {
            list = JSON.parse(jsonList);
            $("#IDList li").remove();
            $('#sendToID').hide();

            var hasAdmin = false; // 增加一個變數來追蹤是否有管理員

            for (i = 0; i < list.length; i++) {
                $("#IDList").append($("<li></li>").attr("class", "list-group-item").attr("onclick", "ccon(this)").text(list[i].Name));

                // 檢查是否有管理員
                if (list[i].Name === "管理員") {
                    hasAdmin = true;
                }
            }

            // 如果IDList中不包含管理員，顯示提示訊息
            // if (!hasAdmin) {
            //     alert("目前沒有客服人員請稍待片刻");
            // } else {
            //     alert("請輸入想諮詢的問題，專人會幫您服務");
            // }
            var selfIDText = $("#SelfID").text().trim();
            if (selfIDText !== "管理員") {
                if (!hasAdmin) {
                    Swal.fire("目前沒有客服人員請稍待片刻");
                    // alert("目前沒有客服人員請稍待片刻");

                } else {
                    Swal.fire("請輸入想諮詢的問題，專人會幫您服務");
 
                }
            } 


            var selfIDText = $("#SelfID").text().trim();
            if (selfIDText !== "管理員") {
                // 設定#sendToID的值為"管理員"
                $('#sendToID').val("管理員");
            } else {
                // 否則，設定#sendToID的值為所點擊元素的文字內容
                $('#sendToID').val($(element).text());
            }
        });

        

        function ccon(element) {
            var selfIDText = $("#SelfID").text().trim();
            if (selfIDText !== "管理員") {
                $("#messageList").empty();
            }
            $('#sendToID').val($(element).text());
            // $("#messageList").empty();
        }

 

        //控制登入使用者看到的畫面
        
        var userName = document.getElementById("SelfID").innerText;
        var leftbox1 = document.getElementById("1");
        var leftbox2 = document.getElementById("2");
        console.log(userName);

       
        if (userName === "管理員") {
            leftbox1.style.display = "block"; 
            leftbox2.style.display = "none";
        } else {
            leftbox1.style.display = "none"; 
            leftbox2.style.display = "block";  
        }






        // 更新聊天內容事件
        connection.on("UpdContent", function (msg) {
            // 創建一個新的列表項目，並使用style屬性增加空白
            var listItem = $("<li></li>").attr("class", "list-group-item").text(msg).css("margin-bottom", "25px");

            // 將列表項目添加到 #messageList
            $("#messageList").append(listItem);

            // 滾動到列表底部
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;
        });


        //發送訊息
        connection.on("UpdContentSend", function (data) {
            console.log(data);
            var name = data.senderName;
            var msg = data.message;
            // 取得現在的時間
            var currentTime = new Date().toLocaleTimeString();

            // 生成新的列表項目
            var listItem = $("<li></li>").addClass("d-flex justify-content-between mb-4");

            // 生成卡片元素
            var card = $("<div></div>").addClass("card");

            // 卡片標題（name）
            var nameParagraph = $("<p></p>").addClass("fw-bold mb-0").attr("id", "name").text(name).css("margin-right", "20px");

            // 時間（time）
            var timeParagraph = $("<p></p>").addClass("text-muted small mb-0").attr("id", "time")
                .html("<i class='far fa-clock'></i> " + currentTime);
            // 卡片主體內容（msgshow）
            var msgParagraph = $("<p></p>").addClass("mb-0").attr("id", "msgshow").text(msg);

            // 將元素組裝起來
            card.append($("<div></div>").addClass("card-header d-flex justify-content-between p-3")
                .append(nameParagraph).append(timeParagraph));
            card.append($("<div></div>").addClass("card-body").append(msgParagraph));
            listItem.append(card);

            // 將新的列表項目添加到 messageList 中
            $("#messageList").append(listItem);

            // 滾動到底部
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;

            // 可選：在此處調用其他需要的函式（例如 syncToBottomChat）
        });


        //接收訊息
        connection.on("UpdContentCatch", function (data) {
            console.log(data);
            var youtubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
            var name = data.senderName;
            var msg = data.message;
            // 取得現在的時間
            var currentTime = new Date().toLocaleTimeString();

            // 生成新的列表項目
            var listItem = $("<li></li>").addClass("d-flex justify-content-end mb-4");

            // 生成卡片元素
            var card = $("<div></div>").addClass("card");

            // 卡片標題（name）
            var nameParagraph = $("<p></p>").addClass("fw-bold mb-0").attr("id", "name").text(name).css("margin-right", "20px");

            // 時間（time）
            var timeParagraph = $("<p></p>").addClass("text-muted small mb-0").attr("id", "time")
                .html("<i class='far fa-clock'></i> " + currentTime);

            // 卡片主體內容（msgshow）
            var msgParagraph = $("<p></p>").addClass("mb-0").attr("id", "msgshow").text(msg);

            // 調整元素位置
            card.append($("<div></div>").addClass("card-header d-flex justify-content-end p-3")
                .append(nameParagraph).append(timeParagraph));
            card.append($("<div></div>").addClass("card-body text-end").append(msgParagraph));
            listItem.append(card);

            // 將新的列表項目添加到 messageList 中
            $("#messageList").append(listItem);

            // 滾動到底部
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;

            // 可選：在此處調用其他需要的函式（例如 syncToBottomChat）
        });

        $('#message').on('keypress', function (event) {
            if (event.which === 13) {
                $('#sendButton').click();
            }
        });


        //送出訊息事件
       $('#sendButton').on('click', function () {
            console.log(list);
            let selfname = $('#SelfID').html();
            let message = $('#message').val();
            let sendToID = $('#sendToID').val();

            // 檢查 SENDID 是否為空
            if (sendToID.trim() === '') {
                Swal.fire({
                    text: "請選擇一位會員！",
                    icon: "info"
                });
                return;
            }

            // 查找對應的 connectionID
            sendToID = list.find(user => user.Name === sendToID)?.connectionID;

            // 檢查訊息是否為空
            if (message.trim() !== '') {
                connection.invoke("SendMessage", selfname, message, sendToID).then(function () {
                    // 清空文本框
                    $('#message').val('');
                }).catch(function (err) {
                    alert('傳送錯誤: ' + err.toString());
                });
            } else {
                alert('訊息不能為空！');
            }
        });
        //上傳圖片檔案
        $("#fileInput").change(function (event) {
            var file = event.target.files[0]; // 獲取所選的檔案
            var maxSize = 51200; // 50KB 的大小限制，1KB = 1024 bytes

            if (file) {
                if (file.size > maxSize) {
                    Swal.fire("檔案大小超過限制");
                    // 清空檔案輸入欄位
                    $("#fileInput").val('');
                    return;
                }

                var reader = new FileReader(); // 創建FileReader物件來讀取檔案
                reader.onload = function (e) {
                    var imageSrc = e.target.result; // 獲取圖片的URL
                    // createCardWithImage(imageSrc);
                    sendImageToHub(imageSrc); // 創建包含圖片的卡片並添加到消息列表中
                };
                reader.readAsDataURL(file); // 讀取檔案並轉換為URL
            }
        });
//接收圖片
        function createCardWithImageRec(data) {
            var name = data.senderName;
            var imageSrc = data.image;
            // 取得現在的時間
            var currentTime = new Date().toLocaleTimeString();
            var listItem = $("<li></li>").addClass("d-flex justify-content-between mb-4");
            var card = $("<div></div>").addClass("card");
            var nameParagraph = $("<p></p>").addClass("fw-bold mb-0").attr("id", "name").text(name).css("margin-right", "20px");
             // 時間（time）
            var timeParagraph = $("<p></p>").addClass("text-muted small mb-0").attr("id", "time")
                .html("<i class='far fa-clock'></i> " + currentTime);
            var image = $("<img>").addClass("card-img-top").attr("src", imageSrc).attr("alt", "Selected Image").css({ "width": "200px" });
            card.append($("<div></div>").addClass("card-header d-flex justify-content-end p-3")
                .append(nameParagraph).append(timeParagraph));
            card.append($("<div></div>").addClass("card-body").append(image));
            listItem.append(card);
            $("#messageList").append(listItem);
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;
        }
        //發送圖片
        function createCardWithImageSen(data) {
            var name = data.senderName;
            var imageSrc = data.image;
            // 取得現在的時間
            var currentTime = new Date().toLocaleTimeString();
            var listItem = $("<li></li>").addClass("d-flex justify-content-end mb-4");
            var card = $("<div></div>").addClass("card");
            var nameParagraph = $("<p></p>").addClass("fw-bold mb-0").attr("id", "name").text(name).css("margin-right", "20px");
            // 時間（time）
            var timeParagraph = $("<p></p>").addClass("text-muted small mb-0").attr("id", "time")
                .html("<i class='far fa-clock'></i> " + currentTime);
            var image = $("<img >").addClass("card-img-top").attr("src", imageSrc).attr("alt", "Selected Image").css({"width":"200px" });
            card.append($("<div></div>").addClass("card-header d-flex justify-content-end p-3")
                .append(nameParagraph).append(timeParagraph));
            card.append($("<div></div>").addClass("card-body text-end").append(image));
            listItem.append(card);
            $("#messageList").append(listItem);
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;
        }
        //圖片要求事件
        function sendImageToHub(imageSrc) {
            // console.log(imageSrc);
            // Send the image data to the hub
            let selfname = $('#SelfID').html();
            let sendToID = $('#sendToID').val();
            sendToID = list.find(user => user.Name === sendToID)?.connectionID;
            connection.invoke("SendImage", selfname, imageSrc, sendToID).catch(function (err) {
                // $('#fileInput').val('');
                return console.error(err.toString());
            });
        }
        //接收連線圖片
        connection.on("ReceiveImage", function (data) {
              createCardWithImageRec(data);
        });
        //發送連線圖片
        connection.on("SendImage", function (data) {
            createCardWithImageSen(data);
        });


        //電子簽章
        //顯示懸浮視窗
        document.getElementById('openModalBtn').addEventListener('click', function () {
            document.getElementById('myModal').style.display = 'block'; // 顯示
        });

        document.getElementsByClassName('close')[0].addEventListener('click', function () {
            document.getElementById('myModal').style.display = 'none'; // 隐藏
        });
        //畫圖功能
        var canvas = document.getElementById("modalCanvas"); // 取得畫布元素
        var ctx = canvas.getContext('2d'); // 使用2D繪圖
        var draw = false; // 是否要繪圖
        var tempPos = [0, 0]; // 繪圖起始位置
        var color = document.getElementById('color');
        var lineWidth = document.getElementById('lineWidth');
        // 畫筆設定
        ctx.strokeStyle = color.value;
        ctx.lineWidth = lineWidth.value;
        // 清除功能
        clearBtn.addEventListener('click', function () {
            console.log(canvas);
            ctx.clearRect(0, 0, canvas.width, canvas.height); // 清除整個畫布
            connection.invoke("ClearCanvas").catch(function (err) {
                return console.error(err.toString());
            });
        });
        // 畫圖事件
        canvas.addEventListener('mousedown', function (e) {
            draw = true;
            tempPos = [e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop];
        });

        canvas.addEventListener('mousemove', function (e) {
            // 偵測畫筆是否為畫圖狀態
            if (draw) {
                var newPos = [e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop]; // 取得結束的位置
                ctx.beginPath(); // 開始繪畫取得路徑
                ctx.moveTo(tempPos[0], tempPos[1]); // 移動到起始位置
                ctx.lineTo(newPos[0], newPos[1]); // 畫線到結束的位置
                ctx.closePath(); // 關閉繪畫的路徑
                ctx.stroke(); // 畫線
                connection.invoke("SendDraw", {
                    "startPos": tempPos,
                    "endPos": newPos,
                    "color": ctx.strokeStyle,
                    "lineWidth": ctx.lineWidth
                }).catch(function (err) {
                    return console.error(err.toString());
                });

                tempPos = newPos; // 記錄下最後的位置為目前的位置
            }
        });

        canvas.addEventListener('mouseup', function () {
            draw = false;
        });

        // 畫筆設定事件
        color.addEventListener('input', function () {
            ctx.strokeStyle = color.value;
        })

        lineWidth.addEventListener('input', function () {
            ctx.lineWidth = lineWidth.value;
        })

        // var connection = new signalR.HubConnectionBuilder().withUrl("/drawHub").build();
        // // 連接事件
        // connection.start().catch(function (err) {
        //     return console.error(err.toString());
        // });
        connection.on("ClearCanvas", function () {
            console.log(canvas);
            ctx.clearRect(0, 0, canvas.width, canvas.height); // 清除整個畫布
            ctx.clearRect(0, 0, canvas.width, canvas.height); // 清除整個畫布
        });
        connection.on("ReceiveDraw", function (json) {
            ctx.strokeStyle = json.color;
            ctx.lineWidth = json.lineWidth;
            ctx.beginPath();
            ctx.moveTo(json.startPos[0], json.startPos[1]);
            ctx.lineTo(json.endPos[0], json.endPos[1])
            ctx.closePath();
            ctx.stroke();
        });
    </script> }    