// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ClinicWeb.Models;

public partial class ClinicSysContext : DbContext
{
    public ClinicSysContext(DbContextOptions<ClinicSysContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppointmentRoomSchedule> AppointmentRoomSchedule { get; set; }

    public virtual DbSet<ApptClinicList> ApptClinicList { get; set; }

    public virtual DbSet<ApptPatientStateRef> ApptPatientStateRef { get; set; }

    public virtual DbSet<AttendanceTAttendance> AttendanceTAttendance { get; set; }

    public virtual DbSet<AttendanceTExpenseRequests> AttendanceTExpenseRequests { get; set; }

    public virtual DbSet<AttendanceTExpenseTypes> AttendanceTExpenseTypes { get; set; }

    public virtual DbSet<AttendanceTLeave> AttendanceTLeave { get; set; }

    public virtual DbSet<AttendanceTLeaveTypes> AttendanceTLeaveTypes { get; set; }

    public virtual DbSet<CasesMainCase> CasesMainCase { get; set; }

    public virtual DbSet<CasesMedicalRecords> CasesMedicalRecords { get; set; }

    public virtual DbSet<CasesNewBornList> CasesNewBornList { get; set; }

    public virtual DbSet<CasesPrescription> CasesPrescription { get; set; }

    public virtual DbSet<CasesPrescriptionlist> CasesPrescriptionlist { get; set; }

    public virtual DbSet<CasesTestReport> CasesTestReport { get; set; }

    public virtual DbSet<MemberCare> MemberCare { get; set; }

    public virtual DbSet<MemberEmployeeList> MemberEmployeeList { get; set; }

    public virtual DbSet<MemberMemberList> MemberMemberList { get; set; }

    public virtual DbSet<PharmacyTClinicalUseDetails> PharmacyTClinicalUseDetails { get; set; }

    public virtual DbSet<PharmacyTClinicalUseList> PharmacyTClinicalUseList { get; set; }

    public virtual DbSet<PharmacyTMedicinesList> PharmacyTMedicinesList { get; set; }

    public virtual DbSet<PharmacyTSideEffectDetails> PharmacyTSideEffectDetails { get; set; }

    public virtual DbSet<PharmacyTSideEffectList> PharmacyTSideEffectList { get; set; }

    public virtual DbSet<PharmacyTTypeDetails> PharmacyTTypeDetails { get; set; }

    public virtual DbSet<PharmacyTTypeList> PharmacyTTypeList { get; set; }

    public virtual DbSet<RoomList> RoomList { get; set; }

    public virtual DbSet<RoomTypeList> RoomTypeList { get; set; }

    public virtual DbSet<ScheduleClinicInfo> ScheduleClinicInfo { get; set; }

    public virtual DbSet<ScheduleClinicSchedule> ScheduleClinicSchedule { get; set; }

    public virtual DbSet<ScheduleClinicTime> ScheduleClinicTime { get; set; }

    public virtual DbSet<ScheduleNurseSchedule> ScheduleNurseSchedule { get; set; }

    public virtual DbSet<SchedulePharmacistSchedule> SchedulePharmacistSchedule { get; set; }

    public virtual DbSet<ScheduleStaffPharmacistShiftsTime> ScheduleStaffPharmacistShiftsTime { get; set; }

    public virtual DbSet<ScheduleStaffSchedule> ScheduleStaffSchedule { get; set; }

    public virtual DbSet<ScheduleWardNurseSchedule> ScheduleWardNurseSchedule { get; set; }

    public virtual DbSet<ScheduleWardShiftsTime> ScheduleWardShiftsTime { get; set; }

    public virtual DbSet<TCart> TCart { get; set; }

    public virtual DbSet<TCoupon> TCoupon { get; set; }

    public virtual DbSet<TCouponWallet> TCouponWallet { get; set; }

    public virtual DbSet<TOrder> TOrder { get; set; }

    public virtual DbSet<TOrderDetail> TOrderDetail { get; set; }

    public virtual DbSet<TProduct> TProduct { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AppointmentRoomSchedule>(entity =>
        {
            entity.HasKey(e => e.AppointmentId);

            entity.ToTable("Appointment_Room_Schedule");

            entity.Property(e => e.AppointmentId).HasColumnName("Appointment_ID");
            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.EndDate).HasMaxLength(50);
            entity.Property(e => e.MemberId).HasColumnName("Member_ID");
            entity.Property(e => e.NurseId).HasColumnName("Nurse_ID");
            entity.Property(e => e.RoomId).HasColumnName("Room_ID");
            entity.Property(e => e.StartDate).HasMaxLength(50);

            entity.HasOne(d => d.Doctor).WithMany(p => p.AppointmentRoomScheduleDoctor)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_Appointment_Room_Schedule_Member_EmployeeList1");

            entity.HasOne(d => d.Member).WithMany(p => p.AppointmentRoomSchedule)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Appointment_Room_Schedule_Member_MemberList");

            entity.HasOne(d => d.Nurse).WithMany(p => p.AppointmentRoomScheduleNurse)
                .HasForeignKey(d => d.NurseId)
                .HasConstraintName("FK_Appointment_Room_Schedule_Member_EmployeeList2");

            entity.HasOne(d => d.Room).WithMany(p => p.AppointmentRoomSchedule)
                .HasForeignKey(d => d.RoomId)
                .HasConstraintName("FK_Appointment_Room_Schedule_RoomList");
        });

        modelBuilder.Entity<ApptClinicList>(entity =>
        {
            entity.HasKey(e => e.ClinicListId);

            entity.ToTable("Appt_ClinicList");

            entity.Property(e => e.ClinicListId).HasColumnName("ClinicList_ID");
            entity.Property(e => e.ClinicId).HasColumnName("Clinic_ID");
            entity.Property(e => e.IsVip).HasColumnName("IsVIP");
            entity.Property(e => e.MemberId).HasColumnName("Member_ID");
            entity.Property(e => e.PatientStateId)
                .HasDefaultValueSql("((8))")
                .HasColumnName("PatientState_ID");

            entity.HasOne(d => d.Clinic).WithMany(p => p.ApptClinicList)
                .HasForeignKey(d => d.ClinicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appt_ClinicList_Schedule_ClinicSchedule");

            entity.HasOne(d => d.Member).WithMany(p => p.ApptClinicList)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appt_ClinicList_Member_MemberList");

            entity.HasOne(d => d.PatientState).WithMany(p => p.ApptClinicList)
                .HasForeignKey(d => d.PatientStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_掛號叫號_當日門診名單_掛號叫號_看診狀態總表");
        });

        modelBuilder.Entity<ApptPatientStateRef>(entity =>
        {
            entity.HasKey(e => e.PatientStateId).HasName("PK_看診狀態總表");

            entity.ToTable("Appt_PatientState_Ref");

            entity.Property(e => e.PatientStateId).HasColumnName("PatientState_ID");
            entity.Property(e => e.PatientStateName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("PatientState_Name");
        });

        modelBuilder.Entity<AttendanceTAttendance>(entity =>
        {
            entity.HasKey(e => e.FAttendanceId).HasName("PK_tAttendance");

            entity.ToTable("Attendance_tAttendance");

            entity.Property(e => e.FAttendanceId).HasColumnName("fAttendanceID");
            entity.Property(e => e.FAttendanceCis)
                .HasMaxLength(10)
                .HasColumnName("fAttendanceCIS");
            entity.Property(e => e.FAttendanceCos)
                .HasMaxLength(10)
                .HasColumnName("fAttendanceCOS");
            entity.Property(e => e.FCheckInTime)
                .HasColumnType("datetime")
                .HasColumnName("fCheckInTime");
            entity.Property(e => e.FCheckOutTime)
                .HasColumnType("datetime")
                .HasColumnName("fCheckOutTime");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeID");
            entity.Property(e => e.FWorkDate)
                .HasColumnType("date")
                .HasColumnName("fWorkDate");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.AttendanceTAttendance)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Attendance_tAttendance_Member_EmployeeList");
        });

        modelBuilder.Entity<AttendanceTExpenseRequests>(entity =>
        {
            entity.HasKey(e => e.FRequestId).HasName("PK_tExpenseRequests");

            entity.ToTable("Attendance_tExpenseRequests");

            entity.Property(e => e.FRequestId).HasColumnName("fRequestID");
            entity.Property(e => e.FAmount)
                .HasColumnType("money")
                .HasColumnName("fAmount");
            entity.Property(e => e.FApprovalStatus)
                .HasMaxLength(50)
                .HasColumnName("fApprovalStatus");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeID");
            entity.Property(e => e.FExpenseDate)
                .HasColumnType("datetime")
                .HasColumnName("fExpenseDate");
            entity.Property(e => e.FExpenseTypeId).HasColumnName("fExpenseTypeID");
            entity.Property(e => e.FPayStatus)
                .HasMaxLength(50)
                .HasColumnName("fPayStatus");
            entity.Property(e => e.FRequestDate)
                .HasColumnType("datetime")
                .HasColumnName("fRequestDate");
            entity.Property(e => e.FRequestsDescription)
                .HasMaxLength(200)
                .HasColumnName("fRequestsDescription");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.AttendanceTExpenseRequests)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Attendance_tExpenseRequests_Member_EmployeeList");

            entity.HasOne(d => d.FExpenseType).WithMany(p => p.AttendanceTExpenseRequests)
                .HasForeignKey(d => d.FExpenseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tExpenseRequests_tExpenseTypes");
        });

        modelBuilder.Entity<AttendanceTExpenseTypes>(entity =>
        {
            entity.HasKey(e => e.FExpenseTypeId).HasName("PK_tExpenseTypes");

            entity.ToTable("Attendance_tExpenseTypes");

            entity.Property(e => e.FExpenseTypeId).HasColumnName("fExpenseTypeID");
            entity.Property(e => e.FExpenseTypeName)
                .HasMaxLength(50)
                .HasColumnName("fExpenseTypeName");
        });

        modelBuilder.Entity<AttendanceTLeave>(entity =>
        {
            entity.HasKey(e => e.FLeaveId).HasName("PK_tLeave");

            entity.ToTable("Attendance_tLeave");

            entity.Property(e => e.FLeaveId).HasColumnName("fLeaveID");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeID");
            entity.Property(e => e.FEndDate)
                .HasColumnType("datetime")
                .HasColumnName("fEndDate");
            entity.Property(e => e.FLeaveDescription)
                .HasMaxLength(200)
                .HasColumnName("fLeaveDescription");
            entity.Property(e => e.FLeaveStatus)
                .HasMaxLength(50)
                .HasColumnName("fLeaveStatus");
            entity.Property(e => e.FLeaveTypeId).HasColumnName("fLeaveTypeID");
            entity.Property(e => e.FStartDate)
                .HasColumnType("datetime")
                .HasColumnName("fStartDate");
            entity.Property(e => e.FSubstitute)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fSubstitute");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.AttendanceTLeave)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Attendance_tLeave_Member_EmployeeList");

            entity.HasOne(d => d.FLeaveType).WithMany(p => p.AttendanceTLeave)
                .HasForeignKey(d => d.FLeaveTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tLeave_tLeaveTypes");
        });

        modelBuilder.Entity<AttendanceTLeaveTypes>(entity =>
        {
            entity.HasKey(e => e.FLeaveTypeId).HasName("PK_tLeaveTypes");

            entity.ToTable("Attendance_tLeaveTypes");

            entity.Property(e => e.FLeaveTypeId).HasColumnName("fLeaveTypeID");
            entity.Property(e => e.FLeaveTypeName)
                .HasMaxLength(50)
                .HasColumnName("fLeaveTypeName");
        });

        modelBuilder.Entity<CasesMainCase>(entity =>
        {
            entity.HasKey(e => e.CaseId);

            entity.ToTable("Cases_MainCase");

            entity.Property(e => e.CaseId).HasColumnName("Case_ID");
            entity.Property(e => e.Attachment).HasMaxLength(50);
            entity.Property(e => e.FirstvisitDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Firstvisit_Date");
            entity.Property(e => e.MemberId).HasColumnName("Member_ID");

            entity.HasOne(d => d.Member).WithMany(p => p.CasesMainCase)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_MainCase_Member_MemberList");
        });

        modelBuilder.Entity<CasesMedicalRecords>(entity =>
        {
            entity.HasKey(e => e.MrId);

            entity.ToTable("Cases_Medical_Records");

            entity.Property(e => e.MrId).HasColumnName("MR_Id");
            entity.Property(e => e.Bp)
                .HasMaxLength(50)
                .HasColumnName("BP");
            entity.Property(e => e.Bt).HasColumnName("BT");
            entity.Property(e => e.CaseId).HasColumnName("Case_ID");
            entity.Property(e => e.Cc).HasColumnName("CC");
            entity.Property(e => e.ClinicId).HasColumnName("Clinic_ID");
            entity.Property(e => e.Disposal).IsRequired();

            entity.HasOne(d => d.Case).WithMany(p => p.CasesMedicalRecords)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_Medical_Records_Cases_MainCase");

            entity.HasOne(d => d.Clinic).WithMany(p => p.CasesMedicalRecords)
                .HasForeignKey(d => d.ClinicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_Medical_Records_Schedule_ClinicInfo");
        });

        modelBuilder.Entity<CasesNewBornList>(entity =>
        {
            entity.HasKey(e => e.NewBornId).HasName("PK_新生兒資料");

            entity.ToTable("Cases_NewBornList");

            entity.Property(e => e.NewBornId).HasColumnName("NewBorn_ID");
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("Birth_Date");
            entity.Property(e => e.BloodType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Blood_Type");
            entity.Property(e => e.IceName)
                .HasMaxLength(50)
                .HasColumnName("ICE_Name");
            entity.Property(e => e.IceNumber)
                .HasMaxLength(50)
                .HasColumnName("ICE_Number");
            entity.Property(e => e.MemberId).HasColumnName("Member_ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Member).WithMany(p => p.CasesNewBornList)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_病例系統_新生兒資料_會員_會員資料");
        });

        modelBuilder.Entity<CasesPrescription>(entity =>
        {
            entity.HasKey(e => e.PrescriptionId).HasName("PK_處方籤");

            entity.ToTable("Cases_Prescription");

            entity.Property(e => e.PrescriptionId).HasColumnName("Prescription_ID");
            entity.Property(e => e.CaseId).HasColumnName("Case_ID");
            entity.Property(e => e.Dispensing).HasMaxLength(50);
            entity.Property(e => e.PrescriptionDate)
                .HasColumnType("datetime")
                .HasColumnName("Prescription_Date");

            entity.HasOne(d => d.Case).WithMany(p => p.CasesPrescription)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_Prescription_Cases_MainCase");
        });

        modelBuilder.Entity<CasesPrescriptionlist>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionId, e.DrugId });

            entity.ToTable("Cases_Prescriptionlist");

            entity.Property(e => e.PrescriptionId).HasColumnName("Prescription_ID");
            entity.Property(e => e.DrugId).HasColumnName("Drug_ID");
            entity.Property(e => e.TotalAmount).HasColumnName("Total_Amount");

            entity.HasOne(d => d.Drug).WithMany(p => p.CasesPrescriptionlist)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_Prescriptionlist_Pharmacy_tMedicinesList");

            entity.HasOne(d => d.Prescription).WithMany(p => p.CasesPrescriptionlist)
                .HasForeignKey(d => d.PrescriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_Prescriptionlist_Cases_Prescription");
        });

        modelBuilder.Entity<CasesTestReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK_檢查報告");

            entity.ToTable("Cases_TestReport");

            entity.Property(e => e.ReportId).HasColumnName("Report_ID");
            entity.Property(e => e.Attachment).HasMaxLength(50);
            entity.Property(e => e.CaseId).HasColumnName("Case_ID");
            entity.Property(e => e.ImagePath).HasMaxLength(50);
            entity.Property(e => e.ReportDate)
                .HasColumnType("datetime")
                .HasColumnName("Report_Date");
            entity.Property(e => e.Result).HasMaxLength(50);
            entity.Property(e => e.TestDate)
                .HasColumnType("datetime")
                .HasColumnName("Test_Date");
            entity.Property(e => e.TestName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Test_Name");

            entity.HasOne(d => d.Case).WithMany(p => p.CasesTestReport)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cases_TestReport_Cases_MainCase");
        });

        modelBuilder.Entity<MemberCare>(entity =>
        {
            entity.HasKey(e => e.CareId);

            entity.ToTable("Member_Care");

            entity.Property(e => e.CareId).HasColumnName("Care_ID");
            entity.Property(e => e.CareDate)
                .HasColumnType("datetime")
                .HasColumnName("Care_Date");
            entity.Property(e => e.NewBornId).HasColumnName("NewBorn_ID");
            entity.Property(e => e.RecordDcp)
                .HasMaxLength(50)
                .HasColumnName("Record_dcp");
            entity.Property(e => e.RecordType)
                .HasMaxLength(50)
                .HasColumnName("Record_Type");

            entity.HasOne(d => d.NewBorn).WithMany(p => p.MemberCare)
                .HasForeignKey(d => d.NewBornId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Member_Care_Cases_NewBornList");
        });

        modelBuilder.Entity<MemberEmployeeList>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK_員工資料表_1");

            entity.ToTable("Member_EmployeeList");

            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("Birth_Date");
            entity.Property(e => e.BloodType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Blood_Type");
            entity.Property(e => e.ContactAddress)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Contact_Address");
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.EmpPassword)
                .HasMaxLength(50)
                .HasColumnName("Emp_Password");
            entity.Property(e => e.EmpType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Emp_Type");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NationalId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("National_ID");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StaffNumber).HasColumnName("Staff_Number");
        });

        modelBuilder.Entity<MemberMemberList>(entity =>
        {
            entity.HasKey(e => e.MemberId).HasName("PK_會員資料");

            entity.ToTable("Member_MemberList");

            entity.Property(e => e.MemberId).HasColumnName("Member_ID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("Birth_Date");
            entity.Property(e => e.BloodType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Blood_Type");
            entity.Property(e => e.ContactAddress)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Contact_Address");
            entity.Property(e => e.IceName)
                .HasMaxLength(50)
                .HasColumnName("ICE_Name");
            entity.Property(e => e.IceNumber)
                .HasMaxLength(50)
                .HasColumnName("ICE_Number");
            entity.Property(e => e.MemEmail)
                .HasMaxLength(50)
                .HasColumnName("Mem_Email");
            entity.Property(e => e.MemPassword)
                .HasMaxLength(50)
                .HasColumnName("Mem_Password");
            entity.Property(e => e.MemberNumber).HasColumnName("Member_Number");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NationalId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("National_ID");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PharmacyTClinicalUseDetails>(entity =>
        {
            entity.ToTable("Pharmacy_tClinicalUseDetails");

            entity.Property(e => e.FIdClicicalUse).HasColumnName("fId_ClicicalUse");
            entity.Property(e => e.FIdDrug).HasColumnName("fId_Drug");

            entity.HasOne(d => d.FIdClicicalUseNavigation).WithMany(p => p.PharmacyTClinicalUseDetails)
                .HasForeignKey(d => d.FIdClicicalUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_藥師系統_t適應證明細表_藥師系統_t適應症總表");

            entity.HasOne(d => d.FIdDrugNavigation).WithMany(p => p.PharmacyTClinicalUseDetails)
                .HasForeignKey(d => d.FIdDrug)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_藥師系統_t適應證明細表_藥師系統_t藥品基本資料");
        });

        modelBuilder.Entity<PharmacyTClinicalUseList>(entity =>
        {
            entity.HasKey(e => e.FIdClinicalUse).HasName("PK_藥師系統_t適應症總表");

            entity.ToTable("Pharmacy_tClinicalUseList");

            entity.Property(e => e.FIdClinicalUse).HasColumnName("fId_ClinicalUse");
            entity.Property(e => e.FClinicalUse)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("fClinicalUse");
            entity.Property(e => e.FClinicalUseCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fClinicalUseCode");
        });

        modelBuilder.Entity<PharmacyTMedicinesList>(entity =>
        {
            entity.HasKey(e => e.FIdDrug).HasName("PK_藥師系統_t藥品基本資料");

            entity.ToTable("Pharmacy_tMedicinesList");

            entity.Property(e => e.FIdDrug).HasColumnName("fId_Drug");
            entity.Property(e => e.FApperance)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fApperance");
            entity.Property(e => e.FBrand)
                .HasMaxLength(50)
                .HasColumnName("fBrand");
            entity.Property(e => e.FDay).HasColumnName("fDay");
            entity.Property(e => e.FDosage)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fDosage");
            entity.Property(e => e.FDrugCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fDrugCode");
            entity.Property(e => e.FDrugDose)
                .HasMaxLength(500)
                .HasColumnName("fDrugDose");
            entity.Property(e => e.FDrugName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("fDrugName");
            entity.Property(e => e.FDurationDays).HasColumnName("fDurationDays");
            entity.Property(e => e.FEachTime).HasColumnName("fEachTime");
            entity.Property(e => e.FGenericName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("fGenericName");
            entity.Property(e => e.FImages)
                .HasMaxLength(50)
                .HasColumnName("fImages");
            entity.Property(e => e.FMaxDose)
                .HasMaxLength(100)
                .HasColumnName("fMaxDose");
            entity.Property(e => e.FPrecautions)
                .HasMaxLength(500)
                .HasColumnName("fPrecautions");
            entity.Property(e => e.FPregnancyCategory)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fPregnancyCategory");
            entity.Property(e => e.FQty).HasColumnName("fQty");
            entity.Property(e => e.FStorage)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("fStorage");
            entity.Property(e => e.FSupplier)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fSupplier");
            entity.Property(e => e.FTradeName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("fTradeName");
            entity.Property(e => e.FWarnings)
                .HasMaxLength(200)
                .HasColumnName("fWarnings");
        });

        modelBuilder.Entity<PharmacyTSideEffectDetails>(entity =>
        {
            entity.ToTable("Pharmacy_tSideEffectDetails");

            entity.Property(e => e.FIdDrug).HasColumnName("fId_Drug");
            entity.Property(e => e.FIdSideEffect).HasColumnName("fId_SideEffect");

            entity.HasOne(d => d.FIdDrugNavigation).WithMany(p => p.PharmacyTSideEffectDetails)
                .HasForeignKey(d => d.FIdDrug)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_藥師系統_t副作用明細表_藥師系統_t藥品基本資料");

            entity.HasOne(d => d.FIdSideEffectNavigation).WithMany(p => p.PharmacyTSideEffectDetails)
                .HasForeignKey(d => d.FIdSideEffect)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_藥師系統_t副作用明細表_藥師系統_t副作用總表");
        });

        modelBuilder.Entity<PharmacyTSideEffectList>(entity =>
        {
            entity.HasKey(e => e.FIdSideEffect).HasName("PK_藥師系統_t副作用總表");

            entity.ToTable("Pharmacy_tSideEffectList");

            entity.Property(e => e.FIdSideEffect).HasColumnName("fId_SideEffect");
            entity.Property(e => e.FSideEffect)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("fSideEffect");
            entity.Property(e => e.FSideEffectCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fSideEffectCode");
        });

        modelBuilder.Entity<PharmacyTTypeDetails>(entity =>
        {
            entity.ToTable("Pharmacy_tTypeDetails");

            entity.Property(e => e.FIdDrug).HasColumnName("fId_Drug");
            entity.Property(e => e.FIdTpye).HasColumnName("fId_Tpye");

            entity.HasOne(d => d.FIdDrugNavigation).WithMany(p => p.PharmacyTTypeDetails)
                .HasForeignKey(d => d.FIdDrug)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Pharmacy_tTypeDetails_Pharmacy_tMedicinesList");

            entity.HasOne(d => d.FIdTpyeNavigation).WithMany(p => p.PharmacyTTypeDetails)
                .HasForeignKey(d => d.FIdTpye)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Pharmacy_tTypeDetails_Pharmacy_tTpyeList");
        });

        modelBuilder.Entity<PharmacyTTypeList>(entity =>
        {
            entity.HasKey(e => e.FIdType).HasName("PK_藥師系統_t劑型總表");

            entity.ToTable("Pharmacy_tTypeList");

            entity.Property(e => e.FIdType).HasColumnName("fId_Type");
            entity.Property(e => e.FType)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fType");
            entity.Property(e => e.FTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fTypeCode");
        });

        modelBuilder.Entity<RoomList>(entity =>
        {
            entity.HasKey(e => e.RoomId);

            entity.Property(e => e.RoomId).HasColumnName("Room_ID");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.TypeId).HasColumnName("Type_ID");

            entity.HasOne(d => d.Type).WithMany(p => p.RoomList)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("FK_RoomList_RoomTypeList");
        });

        modelBuilder.Entity<RoomTypeList>(entity =>
        {
            entity.HasKey(e => e.TypeId);

            entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<ScheduleClinicInfo>(entity =>
        {
            entity.HasKey(e => e.ClinicInfoId).HasName("PK_Schedule_ClinicList");

            entity.ToTable("Schedule_ClinicInfo");

            entity.Property(e => e.ClinicInfoId).HasColumnName("ClinicInfo_ID");
            entity.Property(e => e.ClincRoomId).HasColumnName("ClincRoom_ID");
            entity.Property(e => e.ClinicTimeId).HasColumnName("ClinicTime_ID");
            entity.Property(e => e.Date)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("date");
            entity.Property(e => e.DoctorId).HasColumnName("doctor_ID");
            entity.Property(e => e.JumpStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.LeaveStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.RegistrationLimit).HasDefaultValueSql("((30))");

            entity.HasOne(d => d.ClincRoom).WithMany(p => p.ScheduleClinicInfo)
                .HasForeignKey(d => d.ClincRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_ClinicSchedule_RoomList");

            entity.HasOne(d => d.ClinicTime).WithMany(p => p.ScheduleClinicInfo)
                .HasForeignKey(d => d.ClinicTimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_ClinicSchedule_Schedule_ClinicTime");

            entity.HasOne(d => d.Doctor).WithMany(p => p.ScheduleClinicInfo)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_ClinicInfo_Member_EmployeeList");
        });

        modelBuilder.Entity<ScheduleClinicSchedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK_排班系統_t醫師排班表");

            entity.ToTable("Schedule_ClinicSchedule");

            entity.Property(e => e.ScheduleId).HasColumnName("Schedule_ID");
            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.RoomId).HasColumnName("Room_ID");
            entity.Property(e => e.TimeId).HasColumnName("time_ID");
            entity.Property(e => e.Week).HasColumnName("week");

            entity.HasOne(d => d.Doctor).WithMany(p => p.ScheduleClinicSchedule)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_DoctorSchedule_Member_EmployeeList");

            entity.HasOne(d => d.Room).WithMany(p => p.ScheduleClinicSchedule)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_DoctorSchedule_RoomList");

            entity.HasOne(d => d.Time).WithMany(p => p.ScheduleClinicSchedule)
                .HasForeignKey(d => d.TimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_DoctorSchedule_Schedule_ClinicTime");
        });

        modelBuilder.Entity<ScheduleClinicTime>(entity =>
        {
            entity.HasKey(e => e.ClinicTimeId).HasName("PK_排班系統_門診時段總表");

            entity.ToTable("Schedule_ClinicTime");

            entity.Property(e => e.ClinicTimeId).HasColumnName("ClinicTime_ID");
            entity.Property(e => e.ClinicShifts)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Time)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("time");
        });

        modelBuilder.Entity<ScheduleNurseSchedule>(entity =>
        {
            entity.HasKey(e => e.NurseScheduleId).HasName("PK_排班系統_t護理師排班表");

            entity.ToTable("Schedule_NurseSchedule");

            entity.Property(e => e.NurseScheduleId).HasColumnName("NurseSchedule_ID");
            entity.Property(e => e.ClinicId).HasColumnName("Clinic_ID");
            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");

            entity.HasOne(d => d.Clinic).WithMany(p => p.ScheduleNurseSchedule)
                .HasForeignKey(d => d.ClinicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_NurseSchedule_Schedule_ClinicSchedule");

            entity.HasOne(d => d.Emp).WithMany(p => p.ScheduleNurseSchedule)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_排班系統_t護理師排班表_會員_員工資料表");
        });

        modelBuilder.Entity<SchedulePharmacistSchedule>(entity =>
        {
            entity.HasKey(e => e.PharmacistSchedule).HasName("PK_排班系統_t藥師排班表");

            entity.ToTable("Schedule_PharmacistSchedule");

            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");
            entity.Property(e => e.ShiftsTimeId).HasColumnName("ShiftsTime_ID");

            entity.HasOne(d => d.Emp).WithMany(p => p.SchedulePharmacistSchedule)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_排班系統_t藥師排班表_會員_員工資料表");

            entity.HasOne(d => d.ShiftsTime).WithMany(p => p.SchedulePharmacistSchedule)
                .HasForeignKey(d => d.ShiftsTimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_PharmacistSchedule_Schedule_Staff&PharmacistShiftsTime");
        });

        modelBuilder.Entity<ScheduleStaffPharmacistShiftsTime>(entity =>
        {
            entity.HasKey(e => e.FShiftsTimeId);

            entity.ToTable("Schedule_Staff&PharmacistShiftsTime");

            entity.Property(e => e.FShiftsTimeId).HasColumnName("fShiftsTime_ID");
            entity.Property(e => e.Shifts)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShiftsTime)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ScheduleStaffSchedule>(entity =>
        {
            entity.HasKey(e => e.StaffSchedule).HasName("PK_排班系統_t職員排班表");

            entity.ToTable("Schedule_StaffSchedule");

            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");
            entity.Property(e => e.ShiftsTimeId).HasColumnName("ShiftsTime_ID");

            entity.HasOne(d => d.Emp).WithMany(p => p.ScheduleStaffSchedule)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_StaffSchedule_Member_EmployeeList");

            entity.HasOne(d => d.ShiftsTime).WithMany(p => p.ScheduleStaffSchedule)
                .HasForeignKey(d => d.ShiftsTimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_StaffSchedule_Schedule_Staff&PharmacistShiftsTime");
        });

        modelBuilder.Entity<ScheduleWardNurseSchedule>(entity =>
        {
            entity.HasKey(e => e.WardNurseScheduleId);

            entity.ToTable("Schedule_WardNurseSchedule");

            entity.Property(e => e.WardNurseScheduleId).HasColumnName("WardNurseSchedule_ID");
            entity.Property(e => e.Date)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("date");
            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");
            entity.Property(e => e.WardRoomId).HasColumnName("WardRoom_ID");
            entity.Property(e => e.WardShiftsTimeId).HasColumnName("WardShiftsTime_ID");

            entity.HasOne(d => d.Emp).WithMany(p => p.ScheduleWardNurseSchedule)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_WardNurseSchedule_Member_EmployeeList");

            entity.HasOne(d => d.WardRoom).WithMany(p => p.ScheduleWardNurseSchedule)
                .HasForeignKey(d => d.WardRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_WardNurseSchedule_RoomList");

            entity.HasOne(d => d.WardShiftsTime).WithMany(p => p.ScheduleWardNurseSchedule)
                .HasForeignKey(d => d.WardShiftsTimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Schedule_WardNurseSchedule_Schedule_WardShiftsTime");
        });

        modelBuilder.Entity<ScheduleWardShiftsTime>(entity =>
        {
            entity.HasKey(e => e.WardShiftsTimeId);

            entity.ToTable("Schedule_WardShiftsTime");

            entity.Property(e => e.WardShiftsTimeId).HasColumnName("WardShiftsTime_ID");
            entity.Property(e => e.Shifts)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShiftsTime)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_購物車");

            entity.ToTable("tCart");

            entity.Property(e => e.FAmount).HasColumnName("fAmount");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");

            entity.HasOne(d => d.FMember).WithMany(p => p.TCart)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop_Cart_Member_MemberList");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TCart)
                .HasForeignKey(d => d.FProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop_Cart_Shop_Product");
        });

        modelBuilder.Entity<TCoupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_優惠券");

            entity.ToTable("tCoupon");

            entity.Property(e => e.FCategory)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fCategory");
            entity.Property(e => e.FCriteria).HasColumnName("fCriteria");
            entity.Property(e => e.FDescription)
                .HasMaxLength(50)
                .HasColumnName("fDescription");
            entity.Property(e => e.FEndDate)
                .HasColumnType("date")
                .HasColumnName("fEndDate");
            entity.Property(e => e.FName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPicture)
                .HasColumnType("image")
                .HasColumnName("fPicture");
            entity.Property(e => e.FStartDate)
                .HasColumnType("date")
                .HasColumnName("fStartDate");
            entity.Property(e => e.FValue).HasColumnName("fValue");
        });

        modelBuilder.Entity<TCouponWallet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_優惠券匣");

            entity.ToTable("tCouponWallet");

            entity.Property(e => e.FCouponId).HasColumnName("fCouponId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FUsed).HasColumnName("fUsed");

            entity.HasOne(d => d.FCoupon).WithMany(p => p.TCouponWallet)
                .HasForeignKey(d => d.FCouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShopCouponWallet_ShopCoupon");

            entity.HasOne(d => d.FMember).WithMany(p => p.TCouponWallet)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShopCouponWallet_Member_MemberList");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_訂單");

            entity.ToTable("tOrder");

            entity.Property(e => e.FAccountFiveNumber)
                .HasMaxLength(50)
                .HasColumnName("fAccountFiveNumber");
            entity.Property(e => e.FCheckPayDate)
                .HasColumnType("datetime")
                .HasColumnName("fCheckPayDate");
            entity.Property(e => e.FCouponIdforAmount).HasColumnName("fCouponIdforAmount");
            entity.Property(e => e.FCouponIdforPercent).HasColumnName("fCouponIdforPercent");
            entity.Property(e => e.FCouponIdforShip).HasColumnName("fCouponIdforShip");
            entity.Property(e => e.FGetDate)
                .HasColumnType("datetime")
                .HasColumnName("fGetDate");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FMemo)
                .HasMaxLength(50)
                .HasColumnName("fMemo");
            entity.Property(e => e.FOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fOrderId");
            entity.Property(e => e.FOrderPrice).HasColumnName("fOrderPrice");
            entity.Property(e => e.FPayType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fPayType");
            entity.Property(e => e.FReceiverAddress)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fReceiverAddress");
            entity.Property(e => e.FReceiverName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fReceiverName");
            entity.Property(e => e.FReceiverPhone)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fReceiverPhone");
            entity.Property(e => e.FShipDate)
                .HasColumnType("datetime")
                .HasColumnName("fShipDate");
            entity.Property(e => e.FShipPrice).HasColumnName("fShipPrice");
            entity.Property(e => e.FShipType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fShipType");

            entity.HasOne(d => d.FCouponIdforAmountNavigation).WithMany(p => p.TOrderFCouponIdforAmountNavigation)
                .HasForeignKey(d => d.FCouponIdforAmount)
                .HasConstraintName("FK_Shop_Order_Shop_Coupon");

            entity.HasOne(d => d.FCouponIdforPercentNavigation).WithMany(p => p.TOrderFCouponIdforPercentNavigation)
                .HasForeignKey(d => d.FCouponIdforPercent)
                .HasConstraintName("FK_Shop_Order_Shop_Coupon1");

            entity.HasOne(d => d.FCouponIdforShipNavigation).WithMany(p => p.TOrderFCouponIdforShipNavigation)
                .HasForeignKey(d => d.FCouponIdforShip)
                .HasConstraintName("FK_Shop_Order_Shop_Coupon2");

            entity.HasOne(d => d.FMember).WithMany(p => p.TOrder)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop_Order_Member_MemberList");
        });

        modelBuilder.Entity<TOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Shop_OrderDetail");

            entity.ToTable("tOrderDetail");

            entity.Property(e => e.FAmount).HasColumnName("fAmount");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderDetail)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop_OrderDetail_Shop_Order");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TOrderDetail)
                .HasForeignKey(d => d.FProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop_OrderDetail_Shop_Product");
        });

        modelBuilder.Entity<TProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_產品");

            entity.ToTable("tProduct");

            entity.Property(e => e.FCategory)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fCategory");
            entity.Property(e => e.FDescription)
                .HasMaxLength(50)
                .HasColumnName("fDescription");
            entity.Property(e => e.FEndDate)
                .HasColumnType("date")
                .HasColumnName("fEndDate");
            entity.Property(e => e.FName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPicture)
                .HasColumnType("image")
                .HasColumnName("fPicture");
            entity.Property(e => e.FPrice).HasColumnName("fPrice");
            entity.Property(e => e.FStartDate)
                .HasColumnType("date")
                .HasColumnName("fStartDate");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}